// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/service.proto

package hostconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HostConfig_ChangeHostname_FullMethodName  = "/hostconfig.HostConfig/ChangeHostname"
	HostConfig_ListDNSServers_FullMethodName  = "/hostconfig.HostConfig/ListDNSServers"
	HostConfig_AddDNSServer_FullMethodName    = "/hostconfig.HostConfig/AddDNSServer"
	HostConfig_RemoveDNSServer_FullMethodName = "/hostconfig.HostConfig/RemoveDNSServer"
)

// HostConfigClient is the client API for HostConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostConfigClient interface {
	ChangeHostname(ctx context.Context, in *ChangeHostnameRequest, opts ...grpc.CallOption) (*ChangeHostnameResponse, error)
	ListDNSServers(ctx context.Context, in *ListDNSServersRequest, opts ...grpc.CallOption) (*ListDNSServersResponse, error)
	AddDNSServer(ctx context.Context, in *AddDNSServerRequest, opts ...grpc.CallOption) (*AddDNSServerResponse, error)
	RemoveDNSServer(ctx context.Context, in *RemoveDNSServerRequest, opts ...grpc.CallOption) (*RemoveDNSServerResponse, error)
}

type hostConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewHostConfigClient(cc grpc.ClientConnInterface) HostConfigClient {
	return &hostConfigClient{cc}
}

func (c *hostConfigClient) ChangeHostname(ctx context.Context, in *ChangeHostnameRequest, opts ...grpc.CallOption) (*ChangeHostnameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeHostnameResponse)
	err := c.cc.Invoke(ctx, HostConfig_ChangeHostname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostConfigClient) ListDNSServers(ctx context.Context, in *ListDNSServersRequest, opts ...grpc.CallOption) (*ListDNSServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDNSServersResponse)
	err := c.cc.Invoke(ctx, HostConfig_ListDNSServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostConfigClient) AddDNSServer(ctx context.Context, in *AddDNSServerRequest, opts ...grpc.CallOption) (*AddDNSServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDNSServerResponse)
	err := c.cc.Invoke(ctx, HostConfig_AddDNSServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostConfigClient) RemoveDNSServer(ctx context.Context, in *RemoveDNSServerRequest, opts ...grpc.CallOption) (*RemoveDNSServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDNSServerResponse)
	err := c.cc.Invoke(ctx, HostConfig_RemoveDNSServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostConfigServer is the server API for HostConfig service.
// All implementations must embed UnimplementedHostConfigServer
// for forward compatibility
type HostConfigServer interface {
	ChangeHostname(context.Context, *ChangeHostnameRequest) (*ChangeHostnameResponse, error)
	ListDNSServers(context.Context, *ListDNSServersRequest) (*ListDNSServersResponse, error)
	AddDNSServer(context.Context, *AddDNSServerRequest) (*AddDNSServerResponse, error)
	RemoveDNSServer(context.Context, *RemoveDNSServerRequest) (*RemoveDNSServerResponse, error)
	mustEmbedUnimplementedHostConfigServer()
}

// UnimplementedHostConfigServer must be embedded to have forward compatible implementations.
type UnimplementedHostConfigServer struct {
}

func (UnimplementedHostConfigServer) ChangeHostname(context.Context, *ChangeHostnameRequest) (*ChangeHostnameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeHostname not implemented")
}
func (UnimplementedHostConfigServer) ListDNSServers(context.Context, *ListDNSServersRequest) (*ListDNSServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDNSServers not implemented")
}
func (UnimplementedHostConfigServer) AddDNSServer(context.Context, *AddDNSServerRequest) (*AddDNSServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDNSServer not implemented")
}
func (UnimplementedHostConfigServer) RemoveDNSServer(context.Context, *RemoveDNSServerRequest) (*RemoveDNSServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDNSServer not implemented")
}
func (UnimplementedHostConfigServer) mustEmbedUnimplementedHostConfigServer() {}

// UnsafeHostConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostConfigServer will
// result in compilation errors.
type UnsafeHostConfigServer interface {
	mustEmbedUnimplementedHostConfigServer()
}

func RegisterHostConfigServer(s grpc.ServiceRegistrar, srv HostConfigServer) {
	s.RegisterService(&HostConfig_ServiceDesc, srv)
}

func _HostConfig_ChangeHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostConfigServer).ChangeHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostConfig_ChangeHostname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostConfigServer).ChangeHostname(ctx, req.(*ChangeHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostConfig_ListDNSServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDNSServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostConfigServer).ListDNSServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostConfig_ListDNSServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostConfigServer).ListDNSServers(ctx, req.(*ListDNSServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostConfig_AddDNSServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDNSServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostConfigServer).AddDNSServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostConfig_AddDNSServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostConfigServer).AddDNSServer(ctx, req.(*AddDNSServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostConfig_RemoveDNSServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDNSServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostConfigServer).RemoveDNSServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostConfig_RemoveDNSServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostConfigServer).RemoveDNSServer(ctx, req.(*RemoveDNSServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostConfig_ServiceDesc is the grpc.ServiceDesc for HostConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hostconfig.HostConfig",
	HandlerType: (*HostConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeHostname",
			Handler:    _HostConfig_ChangeHostname_Handler,
		},
		{
			MethodName: "ListDNSServers",
			Handler:    _HostConfig_ListDNSServers_Handler,
		},
		{
			MethodName: "AddDNSServer",
			Handler:    _HostConfig_AddDNSServer_Handler,
		},
		{
			MethodName: "RemoveDNSServer",
			Handler:    _HostConfig_RemoveDNSServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
